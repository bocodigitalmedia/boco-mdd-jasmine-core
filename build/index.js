// Generated by CoffeeScript 1.10.0
var configure,
  hasProp = {}.hasOwnProperty,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

configure = function($) {
  var Generator, MarkdownDrivenJasmineCore, ScriptService, Snippets, SnippetsRenderer;
  if ($ == null) {
    $ = {};
  }
  if ($.indentationString == null) {
    $.indentationString = "  ";
  }
  if ($.joinString == null) {
    $.joinString = "\n";
  }
  if ($.reduceUnique == null) {
    $.reduceUnique = function(arr, v) {
      if (arr.indexOf(v) === -1) {
        arr.push(v);
      }
      return arr;
    };
  }
  if ($.globalVariables == null) {
    $.globalVariables = require("./global-variables");
  }
  if ($.filesVariableName == null) {
    $.filesVariableName = "$files";
  }
  if ($.doneFunctionName == null) {
    $.doneFunctionName = "ok";
  }
  if ($.scriptService == null) {
    $.scriptService = null;
  }
  Snippets = (function() {
    Snippets.prototype.snippets = null;

    function Snippets(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.snippets == null) {
        this.snippets = [];
      }
    }

    Snippets.prototype.add = function(snippet) {
      return this.add(snippet);
    };

    Snippets.prototype.addDescribeStart = function(arg) {
      var depth, text;
      text = arg.text, depth = arg.depth;
      return this.add({
        type: "DescribeStart",
        text: text,
        depth: depth
      });
    };

    Snippets.prototype.addInitializeVariables = function(arg) {
      var depth, vars;
      vars = arg.vars, depth = arg.depth;
      return this.add({
        type: "InitializeVariables",
        vars: vars,
        depth: depth
      });
    };

    Snippets.prototype.addBeforeEachStart = function(arg) {
      var depth;
      depth = arg.depth;
      return this.add({
        type: "BeforeEachStart",
        depth: depth
      });
    };

    Snippets.prototype.addAssignFile = function(arg) {
      var data, depth, path, variableName;
      variableName = arg.variableName, path = arg.path, data = arg.data, depth = arg.depth;
      return this.add({
        type: "AssignFile",
        variableName: variableName,
        path: path,
        data: data,
        depth: depth
      });
    };

    Snippets.prototype.addBeforeEachCode = function(arg) {
      var code, depth;
      code = arg.code, depth = arg.depth;
      return this.add({
        type: "BeforeEachCode",
        code: code,
        depth: depth
      });
    };

    Snippets.prototype.addBeforeEachEnd = function(arg) {
      var depth;
      depth = arg.depth;
      return this.add({
        type: "BeforeEachEnd",
        depth: depth
      });
    };

    Snippets.prototype.addAfterEachStart = function(arg) {
      var depth;
      depth = arg.depth;
      return this.add({
        type: "AfterEachStart",
        depth: depth
      });
    };

    Snippets.prototype.addDeleteFile = function(arg) {
      var depth, path, variableName;
      variableName = arg.variableName, path = arg.path, depth = arg.depth;
      return this.add({
        type: "DeleteFile",
        variableName: variableName,
        path: path,
        depth: depth
      });
    };

    Snippets.prototype.addAfterEachEnd = function(arg) {
      var depth;
      depth = arg.depth;
      return this.add({
        type: "AfterEachEnd",
        depth: depth
      });
    };

    Snippets.prototype.addAssertionStart = function(arg) {
      var depth, doneFunctionName, isAsync, text;
      doneFunctionName = arg.doneFunctionName, text = arg.text, isAsync = arg.isAsync, depth = arg.depth;
      return this.add({
        type: "AssertionStart",
        doneFunctionName: doneFunctionName,
        text: text,
        isAsync: isAsync,
        depth: depth
      });
    };

    Snippets.prototype.addAssertionCode = function(arg) {
      var code, depth;
      code = arg.code, depth = arg.depth;
      return this.add({
        type: "AssertionCode",
        code: code,
        depth: depth
      });
    };

    Snippets.prototype.addAssertionEnd = function(arg) {
      var depth;
      depth = arg.depth;
      return this.add({
        type: "AssertionEnd",
        depth: depth
      });
    };

    Snippets.prototype.addDescribeEnd = function(arg) {
      var depth;
      depth = arg.depth;
      return this.add({
        type: "DescribeEnd",
        depth: depth
      });
    };

    Snippets.prototype.addBreak = function() {
      return this.add({
        type: "Break",
        depth: 0
      });
    };

    Snippets.prototype.map = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.snippets).map.apply(ref, args);
    };

    return Snippets;

  })();
  SnippetsRenderer = (function() {
    SnippetsRenderer.prototype.indentationString = null;

    SnippetsRenderer.prototype.joinString = null;

    function SnippetsRenderer(props) {
      if (props == null) {
        props = {};
      }
      if (this.indentationString == null) {
        this.indentationString = $.indentationString;
      }
      if (this.joinString == null) {
        this.joinString = $.joinString;
      }
    }

    SnippetsRenderer.prototype.indent = function(code, depth) {
      var i, indentation, results;
      indentation = (function() {
        results = [];
        for (var i = 1; 1 <= depth ? i < depth : i > depth; 1 <= depth ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map((function(_this) {
        return function() {
          return _this.indentationString;
        };
      })(this)).join('');
      return code.replace(/^/gm, indentation);
    };

    SnippetsRenderer.prototype.renderSnippet = function(snippet) {
      var snippetStr;
      snippetStr = this["render" + snippet.type].call(this, snippet);
      return this.indent(snippetStr, snippet.depth);
    };

    SnippetsRenderer.prototype.render = function(snippets) {
      return snippets.map(this.renderSnippet.bind(this)).join(this.joinString) + "\n";
    };

    return SnippetsRenderer;

  })();
  ScriptService = (function() {
    ScriptService.prototype.globalVariables = null;

    function ScriptService(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.globalVariables == null) {
        this.globalVariables = $.globalVariables;
      }
    }

    ScriptService.prototype.isGlobalVariable = function(v) {
      return indexOf.call(this.globalVariables, v) >= 0;
    };

    ScriptService.prototype.getVariableNames = function(code) {
      throw Error("not implemented");
    };

    return ScriptService;

  })();
  Generator = (function() {
    Generator.prototype.scriptService = null;

    Generator.prototype.filesVariableName = null;

    Generator.prototype.doneFunctionName = null;

    Generator.prototype.snippetsRenderer = null;

    function Generator(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.scriptService == null) {
        this.scriptService = $.scriptService;
      }
      if (this.filesVariableName == null) {
        this.filesVariableName = $.filesVariableName;
      }
      if (this.doneFunctionName == null) {
        this.doneFunctionName = $.doneFunctionName;
      }
    }

    Generator.prototype.getContextVariableNames = function(contextNode) {
      var ancestorContexts, ancestorVars, beforeEachNodes, code, reduceAncestorVars, vars;
      beforeEachNodes = contextNode.getBeforeEachNodes();
      code = beforeEachNodes.map(function(arg) {
        var code;
        code = arg.code;
        return code;
      }).join("\n");
      vars = this.scriptService.getVariableNames(code);
      if ((ancestorContexts = contextNode.getAncestorContexts()) != null) {
        reduceAncestorVars = (function(_this) {
          return function(vars, ancestorContext) {
            return vars.concat(_this.getContextVariableNames(ancestorContext));
          };
        })(this);
        ancestorVars = ancestorContexts.reduce(reduceAncestorVars, []);
        vars = vars.filter(function(v) {
          return ancestorVars.indexOf(v) === -1;
        });
      }
      return vars.filter((function(_this) {
        return function(v) {
          return !_this.scriptService.isGlobalVariable(v);
        };
      })(this));
    };

    Generator.prototype.isAsyncAssertion = function(code) {
      return RegExp("\\b" + this.doneFunctionName + "\\(\\)").test(code);
    };

    Generator.prototype.generateBeforeEach = function(snippets, contextNode) {
      var beforeEachNodes, depth, fileNodes;
      beforeEachNodes = contextNode.getBeforeEachNodes();
      fileNodes = contextNode.getFileNodes();
      if (!(beforeEachNodes.length || fileNodes.length)) {
        return snippets;
      }
      depth = contextNode.depth + 1;
      snippets.addBeforeEachStart({
        depth: depth
      });
      fileNodes.forEach((function(_this) {
        return function(arg) {
          var data, depth, path;
          path = arg.path, data = arg.data, depth = arg.depth;
          return snippets.addAssignFile({
            variableName: _this.filesVariableName,
            path: path,
            data: data,
            depth: depth + 1
          });
        };
      })(this));
      beforeEachNodes.forEach(function(arg) {
        var code, depth;
        code = arg.code, depth = arg.depth;
        return snippets.addBeforeEachCode({
          code: code,
          depth: depth + 1
        });
      });
      snippets.addBeforeEachEnd({
        depth: depth
      });
      return snippets;
    };

    Generator.prototype.generateAfterEach = function(snippets, contextNode) {
      var depth, fileNodes;
      fileNodes = contextNode.getFileNodes();
      if (!fileNodes.length) {
        return snippets;
      }
      depth = contextNode.depth + 1;
      snippets.addAfterEachStart({
        depth: depth
      });
      fileNodes.forEach((function(_this) {
        return function(arg) {
          var depth, path;
          path = arg.path, depth = arg.depth;
          return snippets.addDeleteFile({
            variableName: _this.filesVariableName,
            path: path,
            depth: depth + 1
          });
        };
      })(this));
      snippets.addBeforeEachEnd({
        depth: depth
      });
      return snippets;
    };

    Generator.prototype.generateAssertion = function(snippets, assertionNode) {
      var code, depth, text;
      depth = assertionNode.depth, text = assertionNode.text, code = assertionNode.code;
      snippets.addAssertionStart({
        text: text,
        isAsync: this.isAsyncAssertion(code),
        doneFunctionName: this.doneFunctionName,
        depth: depth
      });
      snippets.addAssertionCode({
        code: code,
        depth: depth + 1
      });
      snippets.addAssertionEnd({
        depth: depth
      });
      return snippets;
    };

    Generator.prototype.generateAssertions = function(snippets, assertionNodes) {
      if (!assertionNodes.length) {
        return snippets;
      }
      return assertionNodes.reduce(this.generateAssertion.bind(this), snippets);
    };

    Generator.prototype.generateDescribe = function(snippets, contextNode) {
      var depth, text, variableNames;
      if (!contextNode.getAssertionNodes().length) {
        return snippets;
      }
      depth = contextNode.depth, text = contextNode.text;
      variableNames = this.getContextVariableNames(contextNode);
      snippets.addDescribeStart({
        text: text,
        depth: depth
      });
      if (!!variableNames.length) {
        snippets.addInitializeVariables({
          variableNames: variableNames,
          depth: depth + 1
        });
      }
      snippets = this.generateBeforeEach(snippets, contextNode);
      snippets = this.generateAfterEach(snippets, contextNode);
      snippets = this.generateAssertions(snippets, contextNode.getAssertionNodes());
      snippets = this.generateDescribes(snippets, contextNode.getContextNodes());
      snippets.addDescribeEnd({
        depth: depth
      });
      return snippets;
    };

    Generator.prototype.generateDescribes = function(snippets, contextNodes) {
      if (!contextNodes.length) {
        return snippets;
      }
      return contextNodes.reduce(this.generateDescribe.bind(this), snippets);
    };

    Generator.prototype.generateSnippets = function(parseTree, snippets) {
      if (snippets == null) {
        snippets = new Snippets;
      }
      snippets.addInitializeFilesVariable({
        filesVariableName: this.filesVariableName,
        depth: parseTree.depth + 1
      });
      return snippets = this.generateDescribes(snippets, parseTree.getContextNodes());
    };

    Generator.prototype.generate = function(parseTree) {
      var snippets;
      snippets = this.generateSnippets(parseTree);
      return this.snippetsRenderer.render(snippets);
    };

    return Generator;

  })();
  return MarkdownDrivenJasmineCore = {
    configuration: $,
    configure: configure,
    Snippets: Snippets,
    SnippetsRenderer: SnippetsRenderer,
    ScriptService: ScriptService,
    Generator: Generator
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
